// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{
  id Int @default(autoincrement()) @id
  firstName String
  lastName String
  email String @unique
  emailVerify Boolean @default(false)
  password String 
  phoneNumber String 
  phoneVerify  Boolean @default(false)
  status Int @default(1)
  type Int @default(2)
  hotel Hotel?
  createAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt 
}

model HotelType{
  id Int @default(autoincrement()) @id
  name String
  image String
  hotels Hotel[]
  createAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt
}

model Hotel{
  id Int @default(autoincrement()) @id
  name String
    markUp Int
    isAbkhazia Boolean
    region String
    city String
    street String
    home String
    frame String
    latitude Float
    longitude Float
    createAt DateTime @default(now())
    updateAt DateTime @default(now()) @updatedAt

    // 1:n 

    images Image[]

    // n:1

    type HotelType @relation(fields: [htId],references: [id])
    htId Int

    // 1:1

    reseption HotelReseption?
    wifi HotelWifi?
    transport HotelTransport?
    other HotelOtherFacility?

    user User @relation(fields: [userId],references: [id])
    userId Int @unique

    // n:n
    
}


model HotelReseption{
  id Int @default(autoincrement()) @id
  status Boolean @default(false) // false available true impossible
  type Int @default(1)   // 1  Around the clock 2 I'll indicate the time
  fromTime String?
  toTime String?
  checkIn String?
  checkOut String?
  hotel Hotel @relation(fields: [hotelId],references: [id])
  hotelId Int @unique
}

model HotelWifi{
  id Int @default(autoincrement()) @id
  enableHotelWifi Boolean @default(false) // false impossible true available
  typeHotelWifi Boolean @default(false) // fasle not included in price true included in price
  enableRoomWifi Boolean @default(false) // false impossible true available
  typeRoomWifi Boolean @default(false) // false not included in price true included in price
  priceRoomWifi Int?
  priceHotelWifi Int?
  hotel Hotel @relation(fields: [wifiId],references: [id])
  wifiId Int @unique
}

model HotelTransport{
  id Int @default(autoincrement()) @id
  enablePark Boolean @default(false) // false impossible parking true available
  typePark Boolean @default(false) // fasle not included in price true included in price 
  enableTransfer Boolean @default(false) // false impossible parking true available
  typeTransfer Boolean @default(false) // fasle not included in price true included in price 
  pricePark Int?
  priceTransfer Int?
  hotel Hotel @relation(fields: [transportId],references: [id])
  transportId Int @unique
}

model HotelOtherFacility{
  id Int @default(autoincrement()) @id
  service String? @db.Text
  bar String? @db.Text
  health String? @db.Text
  amenity String? @db.Text
  conference String? @db.Text
  beach String?
  enablePet Boolean @default(false) // false impossible true available
  enableChild Boolean @default(false) // false impossible true available
  disabled String? @db.Text
  stuffSay String? @db.Text
  hotel Hotel @relation(fields: [hotelId],references: [id])
  hotelId Int @unique
}

model Image{
  id Int @default(autoincrement()) @id
  url String
  hotel Hotel? @relation(fields: [hotelId],references: [id])
  hotelId Int?
  room Room? @relation(fields: [roomId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  roomId Int?
}

model Room{
  id Int @default(autoincrement()) @id
  name String

  // 1:n

  images Image[]

  // n:1

  // 1:1

  size RoomSize?
  accommodation RoomAccommodation?

  // n:n

  facilities Facility_Room[]
}

model RoomSize{
  id Int @default(autoincrement()) @id
  square Float @db.Double
  count Int @default(0)
  adult Int @default(0)
  child Int @default(0)
  other Int @default(0)
  room Room @relation(fields: [roomId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  roomId Int @unique
}

model RoomAccommodation{
  id Int @default(autoincrement()) @id
  singleBed Int @default(0)
  doubleBed Int @default(0)
  otherBed Int @default(0)
  room Room @relation(fields: [roomId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  roomId Int @unique
}

model FacilityGroup{
  id Int @default(autoincrement()) @id
  type Int @default(1) //  1 hotel 2 room
  name String 
  facilities Facility[]
}

model Facility {
  id Int @default(autoincrement()) @id
  name String
  rooms Facility_Room[]
  facilityGroup FacilityGroup? @relation(fields: [facilityGroupId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  facilityGroupId Int?
}

model Facility_Room{
  facility Facility @relation(fields: [facilityId],references:[id],onDelete: Cascade,onUpdate: Cascade)
  facilityId Int
  room Room @relation(fields: [roomId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  roomId Int
  @@id([facilityId,roomId])
}